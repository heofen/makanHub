# Generated by Django 5.2 on 2025-04-30 18:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название жанра')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameters', models.JSONField(blank=True, help_text='Параметры запуска (например, модель, датасет)', null=True, verbose_name='Параметры')),
                ('status', models.CharField(choices=[('pending', 'Ожидание'), ('running', 'Выполняется'), ('completed', 'Завершено'), ('failed', 'Ошибка')], default='pending', max_length=20, verbose_name='Статус')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Время начала')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Время завершения')),
                ('logs', models.TextField(blank=True, verbose_name='Логи выполнения')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Задача обработки',
                'verbose_name_plural': 'Задачи обработки',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Создание'), ('update', 'Обновление'), ('delete', 'Удаление'), ('login', 'Вход')], max_length=20, verbose_name='Действие')),
                ('model_name', models.CharField(help_text='Название измененной модели (например, Track, User)', max_length=100, verbose_name='Модель')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID измененного объекта', null=True, verbose_name='ID объекта')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время')),
                ('details', models.TextField(blank=True, help_text='Дополнительная информация об изменении', verbose_name='Детали')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Лог аудита',
                'verbose_name_plural': 'Логи аудита',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('artist', models.CharField(max_length=200, verbose_name='Исполнитель')),
                ('duration', models.PositiveIntegerField(help_text='Длительность трека в секундах', verbose_name='Длительность (сек)')),
                ('filepath', models.FileField(help_text='Путь к аудиофайлу', upload_to='tracks/', verbose_name='Файл трека')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracks', to='core.genre', verbose_name='Жанр')),
            ],
            options={
                'verbose_name': 'Трек',
                'verbose_name_plural': 'Треки',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название плейлиста')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичный')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('tracks', models.ManyToManyField(blank=True, related_name='playlists', to='core.track', verbose_name='Треки')),
            ],
            options={
                'verbose_name': 'Плейлист',
                'verbose_name_plural': 'Плейлисты',
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название альбома')),
                ('artist', models.CharField(max_length=200, verbose_name='Исполнитель')),
                ('release_date', models.DateField(blank=True, null=True, verbose_name='Дата релиза')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='album_covers/', verbose_name='Обложка')),
                ('tracks', models.ManyToManyField(blank=True, related_name='albums', to='core.track', verbose_name='Треки')),
            ],
            options={
                'verbose_name': 'Альбом',
                'verbose_name_plural': 'Альбомы',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Метрика схожести от Annoy/CLAP', verbose_name='Оценка схожести')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('recommended_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_for', to='core.track', verbose_name='Рекомендованный трек')),
                ('source_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_recommendations', to='core.track', verbose_name='Исходный трек')),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'verbose_name_plural': 'Рекомендации',
                'unique_together': {('source_track', 'recommended_track')},
            },
        ),
    ]
